-- Create Users Table
CREATE TABLE tbl_Users (
    int_user_id INT AUTO_INCREMENT PRIMARY KEY,
    str_first_name VARCHAR(50) NOT NULL,
    str_last_name VARCHAR(50) NOT NULL,
    str_email VARCHAR(100) UNIQUE NOT NULL,
    str_password VARCHAR(255) NOT NULL, -- Hashed password
    int_phone_number VARCHAR(15),
    str_address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE tbl_Users
RENAME COLUMN int_phone_number TO str_phone_number;

ALTER TABLE tbl_Users
MODIFY str_last_name VARCHAR(50) DEFAULT NULL;

CREATE TABLE tbl_seller_info (
    int_seller_id INT AUTO_INCREMENT PRIMARY KEY,
    int_user_id int,
    int_gst_no int,
    int_lisence_no int,
    int_product_category int,
    FOREIGN KEY (int_user_id) REFERENCES tbl_Users(int_user_id) ON DELETE CASCADE,
    FOREIGN KEY (int_product_category) REFERENCES tbl_categories(int_category_id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE tbl_seller_info add column str_seller_status;
ALTER TABLE tbl_seller_info 
MODIFY COLUMN str_seller_status VARCHAR(10); 

-- Create Categories Table
CREATE TABLE tbl_Categories (
    int_category_id INT AUTO_INCREMENT PRIMARY KEY,
    str_category_name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create Products Table
CREATE TABLE tbl_Products (
    int_product_id INT AUTO_INCREMENT PRIMARY KEY,
    str_name VARCHAR(255) NOT NULL,
    str_description TEXT,
    int_price DECIMAL(10,2) NOT NULL,
    int_stock_quantity INT NOT NULL,
    int_category_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (int_category_id) REFERENCES tbl_Categories(int_category_id) ON DELETE SET NULL
);

-- Create Shopping Cart Table
CREATE TABLE tbl_Cart (
    int_cart_id INT AUTO_INCREMENT PRIMARY KEY,
    int_user_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (int_user_id) REFERENCES tbl_Users(int_user_id) ON DELETE CASCADE
);

-- Create Cart Items Table
CREATE TABLE tbl_Cart_Items (
    int_cart_item_id INT AUTO_INCREMENT PRIMARY KEY,
    int_cart_id INT,
    int_product_id INT,
    int_quantity INT NOT NULL,
    price_at_time_of_addition DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (int_cart_id) REFERENCES tbl__Cart(cart_id) ON DELETE CASCADE,
    FOREIGN KEY (int_product_id) REFERENCES tbl_Products(int_product_id) ON DELETE CASCADE
);

-- Create Orders Table
CREATE TABLE tbl_Orders (
    int_order_id INT AUTO_INCREMENT PRIMARY KEY,
    int_user_id INT,
    total_amount DECIMAL(10,2) NOT NULL,
    payment_method ENUM('Credit Card', 'PayPal', 'Bank Transfer'),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (int_user_id) REFERENCES tbl_Users(int_user_id) ON DELETE CASCADE
);

alter table tbl_orders add column address varchar(30)
ALTER TABLE tbl_orders
MODIFY created_at TIMESTAMP AFTER address,
MODIFY updated_at TIMESTAMP AFTER created_at;

-- Create Order Items Table
CREATE TABLE tbl_Order_Items (
    int_order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    int_order_id INT,
    int_product_id INT,
    int_quantity INT NOT NULL,
    int_price_at_time_of_order DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (int_order_id) REFERENCES tbl_Orders(int_order_id) ON DELETE CASCADE,
    FOREIGN KEY (int_product_id) REFERENCES tbl_Products(int_product_id) ON DELETE CASCADE
);

-- Create Payments Table
CREATE TABLE tbl_Payments (
    int_payment_id INT AUTO_INCREMENT PRIMARY KEY,
    int_order_id INT,
    int_user_id INT,
    int_amount DECIMAL(10,2) NOT NULL,
    str_payment_method ENUM('Credit Card', 'PayPal', 'Bank Transfer'),
    int_transaction_id VARCHAR(255) UNIQUE NOT NULL,
    int_payment_status ENUM('Pending', 'Completed', 'Failed') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (int_order_id) REFERENCES tbl_Orders(int_order_id) ON DELETE CASCADE,
    FOREIGN KEY (int_user_id) REFERENCES tbl_Users(int_user_id) ON DELETE CASCADE
);


CREATE TABLE order_status (
    id INT AUTO_INCREMENT PRIMARY KEY,
    status ENUM('pending', 'shipped', 'delivered', 'canceled') NOT NULL
);

insert into tbl_order_status(status)values('confirmed'),('shipped'),('out for delivery'),('delivered'),('cancelled');

const first = () => { let count = 0; const second = () => { count = count + 1; return count }; return second   }

//join for getting products based on id
select  from tbl_products as p Join tbl_order_items as i
               on p.int_product_id=i.int_product_id;
// join tbl_orders,tbl_Order_Items,tbl_products for listing orders
select i.int_order_id,i.int_product_id,i.int_price,i.int_quantity ,p.str_name from tbl_order_items as i join tbl_products as p on i.int_product_id = p.int_product_id   
     JOIN tbl_orders as o  ON o.int_order_id  = i.int_order_id  where o.int_user_id=?;


create table tbl_product_properties(id int auto_increment primary key,str_properties varchar(100));
insert into tbl_product_properties(str_properties) values('size'),('color'),('materials');

CREATE TABLE tbl_product_image (
    id INT AUTO_INCREMENT PRIMARY KEY,
    int_product_id INT,
    image_path VARCHAR(255),
    FOREIGN KEY (int_product_id) REFERENCES tbl_products(int_product_id)
);

CREATE TABLE tbl_product_variants (
    id INT AUTO_INCREMENT PRIMARY KEY,
    int_product_id INT,
    int_properties_id INT,
    str_properties_value VARCHAR(255),
    str_colour_code VARCHAR(7),
    FOREIGN KEY (int_product_id) REFERENCES tbl_products(int_product_id),
	FOREIGN KEY (int_properties_id) REFERENCES tbl_product_properties(id)
    
);



<cfif structKeyExists(url, "id")>
                <cfset previousPropertyName="">
                <cfoutput query="variables.editVarient" group="str_properties">
                    <cfset propertyName=variables.editVarient.str_properties>
                    <cfset propertyId =variables.editVarient.int_properties_id>
                    <cfset propertyValue=variables.editVarient.str_properties_value>
                <cfif propertyName NEQ previousPropertyName>
                    <tr>
                        <td><label for="#propertyName#"class="form-label"></label>#propertyName#</td>
                        <td>
                            <div id="#propertyName#Container">
                            <cfif variables.editVarient.str_properties EQ propertyName >
                                <div class="input-wrapper mb-2 d-flex align-items-center">
                                    <input type="text" name="#propertyName#_#propertyId#" id="#propertyName#" value="#variables.editVarient.str_properties_value#" class="form-control">
                                    <button type="button" class="btn btn-info ms-2" onclick="toggleOptions(this, '#propertyName#')">+</button>
                                </div>
                            </cfif>
                            </div>
                        
                        </td>
                    </tr>
                    <cfset previousPropertyName=propertyName>
                <cfelse>
                    <tr>
                        <td></td>
                        <td>
                            <div id="#propertyName#Container">
                        <cfif variables.editVarient.str_properties EQ propertyName>
                            <div class="input-wrapper mb-2 d-flex align-items-center">
                                <input type="text" name="#propertyName#_#propertyId#" id="#propertyName#" value="#variables.editVarient.str_properties_value#" class="form-control">
                                <button type="button" class="btn btn-info ms-2" onclick="toggleOptions(this, '#propertyName#')">+</button>
                            </div>
                        </div>
                        </cfif>
                        </td>
                    </tr>
                </cfif>
                </cfoutput>

            <cfelse>

            <cfoutput query="variables.qryGetProductProperties">
            <tr>
                <td><label for="#variables.qryGetProductProperties.str_properties#"class="form-label"></label>#variables.qryGetProductProperties.str_properties#</td>
                <td>
                    <div id="#variables.qryGetProductProperties.str_properties#Container">
                        <div class="input-wrapper mb-2 d-flex align-items-center">
                            <input type="text" name="#variables.qryGetProductProperties.str_properties#_#variables.qryGetProductProperties.id#" id="#variables.qryGetProductProperties.str_properties#"  class="form-control">
                            <button type="button" class="btn btn-info ms-2" onclick="toggleOptions(this, '#variables.qryGetProductProperties.str_properties#')">+</button>
                        </div>
                    </div>
                </td>
            </tr>
            </cfoutput>
            </cfif>