-- Create Users Table
CREATE TABLE tbl_Users (
    int_user_id INT AUTO_INCREMENT PRIMARY KEY,
    str_first_name VARCHAR(50) NOT NULL,
    str_last_name VARCHAR(50) NOT NULL,
    str_email VARCHAR(100) UNIQUE NOT NULL,
    str_password VARCHAR(255) NOT NULL, -- Hashed password
    int_phone_number VARCHAR(15),
    str_address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE tbl_Users
RENAME COLUMN int_phone_number TO str_phone_number;

ALTER TABLE tbl_Users
MODIFY str_last_name VARCHAR(50) DEFAULT NULL;

CREATE TABLE tbl_seller_info (
    int_seller_id INT AUTO_INCREMENT PRIMARY KEY,
    int_user_id int,
    int_gst_no int,
    int_lisence_no int,
    int_product_category int,
    FOREIGN KEY (int_user_id) REFERENCES tbl_Users(int_user_id) ON DELETE CASCADE,
    FOREIGN KEY (int_product_category) REFERENCES tbl_categories(int_category_id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE tbl_seller_info add column str_seller_status;
ALTER TABLE tbl_seller_info 
MODIFY COLUMN str_seller_status VARCHAR(10); 

-- Create Categories Table
CREATE TABLE tbl_Categories (
    int_category_id INT AUTO_INCREMENT PRIMARY KEY,
    str_category_name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create Products Table
CREATE TABLE tbl_Products (
    int_product_id INT AUTO_INCREMENT PRIMARY KEY,
    str_name VARCHAR(255) NOT NULL,
    str_description TEXT,
    int_price DECIMAL(10,2) NOT NULL,
    int_stock_quantity INT NOT NULL,
    int_category_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (int_category_id) REFERENCES tbl_Categories(int_category_id) ON DELETE SET NULL
);

-- Create Shopping Cart Table
CREATE TABLE tbl_Cart (
    int_cart_id INT AUTO_INCREMENT PRIMARY KEY,
    int_user_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (int_user_id) REFERENCES tbl_Users(int_user_id) ON DELETE CASCADE
);

-- Create Cart Items Table
CREATE TABLE tbl_Cart_Items (
    int_cart_item_id INT AUTO_INCREMENT PRIMARY KEY,
    int_cart_id INT,
    int_product_id INT,
    int_quantity INT NOT NULL,
    price_at_time_of_addition DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (int_cart_id) REFERENCES tbl__Cart(cart_id) ON DELETE CASCADE,
    FOREIGN KEY (int_product_id) REFERENCES tbl_Products(int_product_id) ON DELETE CASCADE
);

-- Create Orders Table
CREATE TABLE tbl_Orders (
    int_order_id INT AUTO_INCREMENT PRIMARY KEY,
    int_user_id INT,
    total_amount DECIMAL(10,2) NOT NULL,
    payment_method ENUM('Credit Card', 'PayPal', 'Bank Transfer'),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (int_user_id) REFERENCES tbl_Users(int_user_id) ON DELETE CASCADE
);

alter table tbl_orders add column address varchar(30)
ALTER TABLE tbl_orders
MODIFY created_at TIMESTAMP AFTER address,
MODIFY updated_at TIMESTAMP AFTER created_at;

-- Create Order Items Table
CREATE TABLE tbl_Order_Items (
    int_order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    int_order_id INT,
    int_product_id INT,
    int_quantity INT NOT NULL,
    int_price_at_time_of_order DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (int_order_id) REFERENCES tbl_Orders(int_order_id) ON DELETE CASCADE,
    FOREIGN KEY (int_product_id) REFERENCES tbl_Products(int_product_id) ON DELETE CASCADE
);

-- Create Payments Table
CREATE TABLE tbl_Payments (
    int_payment_id INT AUTO_INCREMENT PRIMARY KEY,
    int_order_id INT,
    int_user_id INT,
    int_amount DECIMAL(10,2) NOT NULL,
    str_payment_method ENUM('Credit Card', 'PayPal', 'Bank Transfer'),
    int_transaction_id VARCHAR(255) UNIQUE NOT NULL,
    int_payment_status ENUM('Pending', 'Completed', 'Failed') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (int_order_id) REFERENCES tbl_Orders(int_order_id) ON DELETE CASCADE,
    FOREIGN KEY (int_user_id) REFERENCES tbl_Users(int_user_id) ON DELETE CASCADE
);


CREATE TABLE order_status (
    id INT AUTO_INCREMENT PRIMARY KEY,
    status ENUM('pending', 'shipped', 'delivered', 'canceled') NOT NULL
);

insert into tbl_order_status(status)values('confirmed'),('shipped'),('out for delivery'),('delivered'),('cancelled');

const first = () => { let count = 0; const second = () => { count = count + 1; return count }; return second   }

//join for getting products based on id
select  from tbl_products as p Join tbl_order_items as i
               on p.int_product_id=i.int_product_id;
// join tbl_orders,tbl_Order_Items,tbl_products for listing orders
select i.int_order_id,i.int_product_id,i.int_price,i.int_quantity ,p.str_name from tbl_order_items as i join tbl_products as p on i.int_product_id = p.int_product_id   
     JOIN tbl_orders as o  ON o.int_order_id  = i.int_order_id  where o.int_user_id=?;


create table tbl_product_properties(id int auto_increment primary key,str_properties varchar(100));
insert into tbl_product_properties(str_properties) values('size'),('color'),('materials');

CREATE TABLE tbl_product_image (
    id INT AUTO_INCREMENT PRIMARY KEY,
    int_product_id INT,
    image_path VARCHAR(255),
    FOREIGN KEY (int_product_id) REFERENCES tbl_products(int_product_id)
);

CREATE TABLE tbl_product_variants (
    id INT AUTO_INCREMENT PRIMARY KEY,
    int_product_id INT,
    int_properties_id INT,
    str_properties_value VARCHAR(255),
    str_colour_code VARCHAR(7),
    FOREIGN KEY (int_product_id) REFERENCES tbl_products(int_product_id),
	FOREIGN KEY (int_properties_id) REFERENCES tbl_product_properties(id)
    
);

create table tbl_seller_permission(id int auto_increment primary key,name varchar(20),description varchar(20));
insert into  tbl_seller_permission (name,description)values('addProduct','addproduct'),
-- ('editProduct','edit their own product'),('viewOrders','view Customer orders'),('manage-inventory','manage product stock'),('view sales report','see their own sales report');

function addProductVariants(productId) {
    // 1. Get existing values from DB
    qryExistingVariants = queryExecute(
        "SELECT int_properties_id, str_properties_value 
         FROM tbl_product_variants 
         WHERE int_product_id = ?",
        [ { value = productId, cfsqltype = "cf_sql_integer" } ],
        { datasource = application.datasource }
    );

    // 2. Organize existing variants into a struct of arrays
    var existingMap = {};
    for (i = 1; i <= qryExistingVariants.recordCount; i++) {
        var pid = qryExistingVariants.int_properties_id[i];
        var val = qryExistingVariants.str_properties_value[i];
        if (!structKeyExists(existingMap, pid)) {
            existingMap[pid] = [];
        }
        arrayAppend(existingMap[pid], val);
    }

    // 3. Loop through form values to determine what to insert/update
    for (i = 1; i <= variables.qryGetProductProperties.recordCount; i++) {
        var propId   = variables.qryGetProductProperties["id"][i];
        var propName = variables.qryGetProductProperties["str_properties"][i];
        var fieldName = propName & "_" & propId;

        if (structKeyExists(form, fieldName)) {
            var newValues = listToArray(trim(form[fieldName]), ",");
            var oldValues = structKeyExists(existingMap, propId) ? existingMap[propId] : [];

            // 4. Update if changed; insert if new
            for (j = 1; j <= arrayLen(newValues); j++) {
                var thisValue = trim(newValues[j]);
                if (len(thisValue)) {
                    if (arrayContains(oldValues, thisValue)) {
                        // Value already exists, no need to do anything
                        continue;
                    }

                    // Check if there's an old value to update
                    if (arrayLen(oldValues) > 0) {
                        // Just update the first old one (assuming one-to-one per property)
                        queryExecute(
                            "UPDATE tbl_product_variants
                             SET str_properties_value = ?
                             WHERE int_product_id = ? AND int_properties_id = ? AND str_properties_value = ?",
                            [
                                { value = thisValue, cfsqltype = "cf_sql_varchar" },
                                { value = productId, cfsqltype = "cf_sql_integer" },
                                { value = propId,    cfsqltype = "cf_sql_integer" },
                                { value = oldValues[1], cfsqltype = "cf_sql_varchar" }
                            ],
                            { datasource = application.datasource }
                        );
                    } else {
                        // Insert new if no old value exists
                        queryExecute(
                            "INSERT INTO tbl_product_variants (int_product_id, int_properties_id, str_properties_value)
                             VALUES (?, ?, ?)",
                            [
                                { value = productId, cfsqltype = "cf_sql_integer" },
                                { value = propId,    cfsqltype = "cf_sql_integer" },
                                { value = thisValue, cfsqltype = "cf_sql_varchar" }
                            ],
                            { datasource = application.datasource }
                        );
                    }
                }
            }
        }
    }
}


